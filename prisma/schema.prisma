// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["accelerate"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("worker") // "worker" or "manager"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  shifts        Shift[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application-specific models
model Perimeter {
  id        String   @id @default(cuid())
  name      String
  centerLat Float
  centerLng Float
  radiusKm  Float
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shifts    Shift[]
}

model Shift {
  id          String     @id @default(cuid())
  userId      String
  clockIn     DateTime
  clockOut    DateTime?
  clockInLat  Float
  clockInLng  Float
  clockOutLat Float?
  clockOutLng Float?
  clockInNote String?
  clockOutNote String?
  totalHours  Float?
  status      String     @default("active") // "active" or "completed"
  perimeterId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  perimeter Perimeter? @relation(fields: [perimeterId], references: [id])
}
